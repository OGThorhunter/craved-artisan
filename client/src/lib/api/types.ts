/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User login */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User registration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description Registration successful */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description User already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check current session */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Session valid */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SessionResponse"];
                    };
                };
                /** @description No valid session */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vendors/{vendorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get vendor details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @example vendor_123 */
                    vendorId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Vendor details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Vendor"];
                    };
                };
                /** @description Vendor not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vendors/{vendorId}/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get vendor products */
        get: {
            parameters: {
                query?: {
                    /** @example 1 */
                    page?: number;
                    /** @example 20 */
                    limit?: number;
                    /** @example Bread */
                    category?: string;
                };
                header?: never;
                path: {
                    /** @example vendor_123 */
                    vendorId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Vendor products */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProductListResponse"];
                    };
                };
                /** @description Vendor not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get products */
        get: {
            parameters: {
                query?: {
                    /** @example 1 */
                    page?: number;
                    /** @example 20 */
                    limit?: number;
                    /** @example Bread */
                    category?: string;
                    /** @example vendor_123 */
                    vendorId?: string;
                    /** @example 5 */
                    minPrice?: number;
                    /** @example 25 */
                    maxPrice?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Products list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProductListResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get product details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @example product_123 */
                    productId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Product details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Product"];
                    };
                };
                /** @description Product not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/vendor/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get vendor analytics overview */
        get: {
            parameters: {
                query: {
                    /** @example monthly */
                    period?: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
                    /** @example vendor_123 */
                    vendorId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Vendor analytics overview */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["VendorOverview"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Vendor not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/vendor/best-sellers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get vendor best sellers */
        get: {
            parameters: {
                query: {
                    /** @example monthly */
                    period?: "weekly" | "monthly" | "quarterly";
                    /** @example 10 */
                    limit?: number;
                    /** @example vendor_123 */
                    vendorId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Vendor best sellers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BestSellersResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Vendor not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add items to cart */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CartRequest"];
                };
            };
            responses: {
                /** @description Cart created/updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CartResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/checkout/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create checkout session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CheckoutSessionRequest"];
                };
            };
            responses: {
                /** @description Checkout session created */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CheckoutSessionResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Cart not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error type */
            error: string;
            /** @description Human-readable error message */
            message: string;
            details?: {
                field?: string;
                message?: string;
            }[];
        };
        PaginationMeta: {
            /** @example 1 */
            page?: number;
            /** @example 20 */
            limit?: number;
            /** @example 150 */
            total?: number;
            /** @example 8 */
            totalPages?: number;
            /** @example true */
            hasNext?: boolean;
            /** @example false */
            hasPrev?: boolean;
        };
        LoginRequest: {
            /**
             * Format: email
             * @example vendor@cravedartisan.com
             */
            email: string;
            /** @example SecurePass123! */
            password: string;
        };
        RegisterRequest: {
            /**
             * Format: email
             * @example newvendor@example.com
             */
            email: string;
            /** @example SecurePass123! */
            password: string;
            /**
             * @default CUSTOMER
             * @example VENDOR
             * @enum {string}
             */
            role: "CUSTOMER" | "VENDOR" | "ADMIN" | "SUPPLIER" | "EVENT_COORDINATOR" | "DROPOFF";
            /** @example John */
            firstName: string;
            /** @example Doe */
            lastName: string;
            /** @example +1-555-123-4567 */
            phone?: string;
            /** @example Artisan baker specializing in sourdough breads */
            bio?: string;
            /**
             * Format: uri
             * @example https://johnsbread.com
             */
            website?: string;
        };
        User: {
            /** @example user_123 */
            id?: string;
            /**
             * Format: email
             * @example vendor@cravedartisan.com
             */
            email?: string;
            /**
             * @example VENDOR
             * @enum {string}
             */
            role?: "CUSTOMER" | "VENDOR" | "ADMIN" | "SUPPLIER" | "EVENT_COORDINATOR" | "DROPOFF";
            profile?: components["schemas"]["UserProfile"];
            /**
             * Format: date-time
             * @example 2025-01-01T00:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2025-01-01T00:00:00Z
             */
            updatedAt?: string;
        };
        UserProfile: {
            /** @example John */
            firstName?: string;
            /** @example Doe */
            lastName?: string;
            /** @example +1-555-123-4567 */
            phone?: string;
            /** @example Artisan baker specializing in sourdough breads */
            bio?: string;
            /**
             * Format: uri
             * @example https://johnsbread.com
             */
            website?: string;
        };
        AuthResponse: {
            /** @example Login successful */
            message?: string;
            user?: components["schemas"]["User"];
        };
        SessionResponse: {
            /** @example true */
            authenticated?: boolean;
            user?: components["schemas"]["User"];
        };
        Vendor: {
            /** @example vendor_123 */
            id?: string;
            /** @example John's Artisan Bakery */
            businessName?: string;
            /** @example Premium artisan bakery specializing in fresh bread and pastries */
            description?: string;
            /** @example Bakery */
            category?: string;
            /** @example 4.8 */
            rating?: number;
            /** @example 1250 */
            totalOrders?: number;
            /**
             * Format: date-time
             * @example 2025-01-01T00:00:00Z
             */
            createdAt?: string;
        };
        Product: {
            /** @example product_123 */
            id?: string;
            /** @example vendor_123 */
            vendorId?: string;
            /** @example Sourdough Bread */
            name?: string;
            /** @example Traditional sourdough bread made with our 100-year-old starter */
            description?: string;
            /** @example 8.99 */
            price?: number;
            /** @example Bread */
            category?: string;
            /** @example 25 */
            stockQuantity?: number;
            /** @example [
             *       "https://example.com/bread1.jpg"
             *     ] */
            images?: string[];
            /** @example 4.9 */
            rating?: number;
            /** @example 47 */
            reviewCount?: number;
            /**
             * Format: date-time
             * @example 2025-01-01T00:00:00Z
             */
            createdAt?: string;
        };
        ProductListResponse: {
            data?: components["schemas"]["Product"][];
            meta?: components["schemas"]["PaginationMeta"];
        };
        VendorOverview: {
            /** @example vendor_123 */
            vendorId?: string;
            /**
             * @example monthly
             * @enum {string}
             */
            period?: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
            revenue?: {
                /** @example 12500.5 */
                current?: number;
                /** @example 11800.25 */
                previous?: number;
                /** @example 5.93 */
                change?: number;
                /**
                 * @example increase
                 * @enum {string}
                 */
                changeType?: "increase" | "decrease";
            };
            orders?: {
                /** @example 156 */
                current?: number;
                /** @example 142 */
                previous?: number;
                /** @example 9.86 */
                change?: number;
            };
            customers?: {
                /** @example 23 */
                new?: number;
                /** @example 89 */
                returning?: number;
                /** @example 112 */
                total?: number;
            };
            topCategories?: {
                /** @example Bread */
                category?: string;
                /** @example 6500.25 */
                revenue?: number;
                /** @example 52 */
                percentage?: number;
            }[];
        };
        BestSeller: {
            /** @example product_123 */
            productId?: string;
            /** @example Sourdough Bread */
            name?: string;
            /** @example 1250.75 */
            revenue?: number;
            /** @example 139 */
            units?: number;
            /** @example 0.85 */
            reorderRate?: number;
            /** @example 4.9 */
            rating?: number;
            /** @example 25 */
            stock?: number;
            /** @example Bread */
            category?: string;
        };
        BestSellersResponse: {
            data?: components["schemas"]["BestSeller"][];
            meta?: {
                /**
                 * @example monthly
                 * @enum {string}
                 */
                period?: "weekly" | "monthly" | "quarterly";
                /** @example 10 */
                limit?: number;
                /** @example 45 */
                totalProducts?: number;
            };
        };
        CartItem: {
            /** @example product_123 */
            productId?: string;
            /** @example 2 */
            quantity?: number;
            /** @example 8.99 */
            price?: number;
        };
        CartRequest: {
            items: components["schemas"]["CartItem"][];
        };
        CartResponse: {
            /** @example cart_123 */
            cartId?: string;
            items?: components["schemas"]["CartItem"][];
            /** @example 17.98 */
            subtotal?: number;
            /** @example 1.44 */
            tax?: number;
            /** @example 19.42 */
            total?: number;
            /**
             * Format: date-time
             * @example 2025-01-02T00:00:00Z
             */
            expiresAt?: string;
        };
        CheckoutSessionRequest: {
            /** @example cart_123 */
            cartId: string;
            shippingAddress: {
                /** @example John */
                firstName?: string;
                /** @example Doe */
                lastName?: string;
                /** @example 123 Main St */
                address?: string;
                /** @example Atlanta */
                city?: string;
                /** @example GA */
                state?: string;
                /** @example 30301 */
                zipCode?: string;
                /** @example US */
                country?: string;
            };
            /**
             * @example pickup
             * @enum {string}
             */
            deliveryMethod: "pickup" | "delivery";
            /** @example Downtown Market */
            pickupLocation?: string;
            /**
             * Format: date-time
             * @example 2025-01-02T14:00:00Z
             */
            pickupTime?: string;
        };
        CheckoutSessionResponse: {
            /** @example cs_123 */
            sessionId?: string;
            /**
             * @example pending
             * @enum {string}
             */
            status?: "pending" | "completed" | "expired";
            /** @example 19.42 */
            amount?: number;
            /** @example usd */
            currency?: string;
            /**
             * Format: date-time
             * @example 2025-01-02T00:00:00Z
             */
            expiresAt?: string;
            /** @example pi_123 */
            paymentIntent?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
