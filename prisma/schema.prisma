generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String
  name            String?
  firstName       String?
  lastName        String?
  phone           String?
  zip_code        String?
  loyalty_member  Boolean          @default(false)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  analyticsEvents AnalyticsEvent[]
  orders          Order[]
  labelJobs       LabelJob[]
  vendorProfile   VendorProfile?

  @@index([zip_code])
}

model VendorProfile {
  id                    String                @id @default(cuid())
  userId                String                @unique
  storeName             String
  bio                   String?
  imageUrl              String?
  slug                  String                @unique
  stripeAccountId       String?
  stripeAccountStatus   String?
  stripeOnboardingUrl   String?
  minMarginPercent      Float?
  marginOverrideEnabled Boolean               @default(false)
  tags                  String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  analyticsEvents       AnalyticsEvent[]
  conversations         Conversation[]
  fulfillmentLocations  FulfillmentLocation[]
  fulfillmentWindows    FulfillmentWindow[]
  products              Product[]
  printerProfiles       PrinterProfile[]
  labelProfiles         LabelProfile[]
  labelTemplates        LabelTemplate[]
  labelJobs             LabelJob[]
  user                  User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // AI Insights relations
  competitorPrices      ProductCompetitorPrice[]
  priceHistory          ProductPriceHistory[]
  inventoryItems        InventoryItem[]
  supplierOffers        InventorySupplierOffer[]
  purchaseOrders        InventoryPurchaseOrder[]
  // Stripe relations
  stripePayments        StripePayment[]
  stripeBalanceTransactions StripeBalanceTransaction[]
  stripePayouts         StripePayout[]
  // Product system relations
  categories            Category[]
  subcategories         Subcategory[]
  recipeParseJobs       RecipeParseJob[]

  @@index([userId])
}

model Product {
  id                    String           @id @default(cuid())
  vendorProfileId       String
  type                  ProductType      @default(FOOD)
  name                  String
  slug                  String           @unique
  description           String?
  categoryId            String?
  subcategoryId         String?
  tags                  String?          // JSON array stored as string
  imageUrl              String?
  active                Boolean          @default(true)
  price                 Float
  baseCost              Float            @default(0)
  laborCost             Float            @default(0)
  targetMarginLowPct    Float            @default(30)
  targetMarginHighPct   Float            @default(45)
  minPrice              Float?
  maxPrice              Float?
  sku                   String?          @unique
  barcode               String?
  taxCode               String?
  // Food-specific fields
  allergenFlags         String?          // JSON array stored as string
  nutritionNotes        String?
  // Service-specific fields
  serviceDurationMin    Int?
  serviceCapacityPerDay Int?
  serviceLeadTimeDays   Int?
  requiresDeposit       Boolean          @default(false)
  // Legacy fields for backward compatibility
  cost                  Float?
  stock                 Int              @default(0)
  isAvailable           Boolean          @default(true)
  targetMargin          Float?
  marginAlert           Boolean          @default(false)
  alertNote             String?
  onWatchlist           Boolean          @default(false)
  lastAiSuggestion      DateTime?
  aiSuggestionNote      String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  recipeId              String?
  analyticsEvents       AnalyticsEvent[]
  cartItems             CartItem[]
  orderItems            OrderItem[]
  recipe                Recipe?                  @relation(fields: [recipeId], references: [id])
  vendor                VendorProfile            @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  competitorPrices      ProductCompetitorPrice[] // AI: Competitor pricing data
  priceHistory          ProductPriceHistory[]    // AI: Price change history
  // New relations
  category              Category?                @relation(fields: [categoryId], references: [id])
  subcategory           Subcategory?             @relation(fields: [subcategoryId], references: [id])
  variants              ProductVariant[]
  materials             ProductMaterial[]

  @@index([vendorProfileId, active, name])
  @@index([categoryId])
  @@index([type])
  @@index([createdAt])
}

model Order {
  id                String                 @id @default(cuid())
  userId            String
  orderNumber       String                 @unique
  zip               String?
  status            OrderStatus            @default(PENDING)
  paymentIntentId   String?
  transferGroup     String?
  subtotal          Float                  @default(0)
  tax               Float                  @default(0)
  shipping          Float                  @default(0)
  total             Float                  @default(0)
  shippingZip       String?
  deliveryDay       String?
  deliveryStatus    String?
  deliveryTimestamp DateTime?
  notes             String?
  shippingAddressId String?
  contextType       FulfillmentContextType @default(NONE)
  marketId          String?
  windowId          String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  analyticsEvents   AnalyticsEvent[]
  shippingAddress   ShippingAddress?       @relation(fields: [shippingAddressId], references: [id])
  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  events            OrderEvent[]
  fulfillments      OrderFulfillment[]
  orderItems        OrderItem[]
  customerVehicle   OrderCustomerVehicle?

  @@index([userId, createdAt])
  @@index([contextType, marketId])
  @@index([contextType, windowId])
}

model Ingredient {
  id                       String                    @id @default(cuid())
  vendorProfileId          String
  name                     String
  description              String?
  unit                     String
  costPerUnit              Float
  tags                     String?
  isAvailable              Boolean                   @default(true)
  supplier                 String?
  preferredSupplierId      String?
  leadTimeDays             Int?
  minOrderQty              Float?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  preferredSupplier        Supplier?                 @relation("PreferredSupplier", fields: [preferredSupplierId], references: [id])
  inventory                IngredientInventory[]
  transactions             InventoryTx[]
  recipeIngredients        RecipeIngredient[]
  recipeIngredientVersions RecipeIngredientVersion[]

  @@index([vendorProfileId, name])
}

model IngredientInventory {
  id              String     @id @default(cuid())
  vendorProfileId String
  ingredientId    String
  quantity        Float
  costBasis       Float
  updatedAt       DateTime   @updatedAt
  ingredient      Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([vendorProfileId, ingredientId])
  @@index([vendorProfileId, ingredientId])
}

model InventoryTx {
  id              String     @id @default(cuid())
  vendorProfileId String
  ingredientId    String
  type            String
  quantity        Float
  unitCost        Float
  note            String?
  createdAt       DateTime   @default(now())
  ingredient      Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@index([vendorProfileId, ingredientId, type, createdAt])
}

// Enhanced inventory item model for supplies/ingredients
model InventoryItem {
  id              String    @id @default(cuid())
  vendorProfileId String
  name            String
  category        String    // FOOD_GRADE, PACKAGING, EQUIPMENT, etc.
  unit            String    // kg, g, ml, bottles, boxes...
  currentQty      Float     @default(0)
  reorderPoint    Float     @default(0)
  preferredQty    Float     @default(0)
  avgCost         Float     @default(0)
  lastCost        Float     @default(0)
  supplierName    String?
  location        String?   // shelf/bin/room
  batchNumber     String?
  expiryDate      DateTime?
  tags            String?   // JSON array stored as string
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  vendor          VendorProfile                @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  movements       InventoryMovement[]
  priceWatches    PriceWatch[]
  supplierOffers  InventorySupplierOffer[]
  purchaseOrderLines InventoryPurchaseOrderLine[]
  productMaterials ProductMaterial[]
  
  @@index([vendorProfileId, name])
  @@index([vendorProfileId, category])
  @@index([expiryDate])
}

model InventoryMovement {
  id              String        @id @default(cuid())
  vendorProfileId String
  inventoryItemId String
  type            MovementType  // RECEIVE, ADJUST, CONSUME, RETURN, WASTE, DONATION, RESERVE
  qty             Float         // + for receive/adjust+, - for consume/adjust-
  unitCost        Float?        // for RECEIVE (updates avg_cost via moving average)
  refType         String?       // ORDER, PRODUCTION, WINDOW, MANUAL
  refId           String?
  notes           String?
  createdAt       DateTime      @default(now())
  
  // Relations
  vendor          VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  
  @@index([vendorProfileId, inventoryItemId, createdAt])
}

enum MovementType {
  RECEIVE
  ADJUST
  CONSUME
  RETURN
  WASTE
  DONATION
  RESERVE
}

model PriceWatch {
  id              String      @id @default(cuid())
  vendorProfileId String
  inventoryItemId String
  targetUnitCost  Float
  source          WatchSource // B2B, MARKET, CUSTOM_URL
  sourceMeta      String?     // JSON stored as string
  active          Boolean     @default(true)
  createdAt       DateTime    @default(now())
  
  // Relations
  vendor          VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  
  @@index([vendorProfileId, inventoryItemId, active])
}

enum WatchSource {
  B2B
  MARKET
  CUSTOM_URL
}

model ReceiptParseJob {
  id              String        @id @default(cuid())
  vendorProfileId String
  sourceType      ReceiptSource // IMAGE, PDF, TEXT
  status          JobStatus     // PENDING, DONE, FAILED
  rawText         String?
  parsedJson      String?       // JSON stored as string
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  vendor          VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  
  @@index([vendorProfileId, createdAt])
}

enum ReceiptSource {
  IMAGE
  PDF
  TEXT
}

enum JobStatus {
  PENDING
  DONE
  FAILED
}

model ProductionPlan {
  id              String   @id @default(cuid())
  vendorProfileId String
  productId       String
  qtyToMake       Int
  plannedAt       DateTime
  status          String   // PLANNED, IN_PROGRESS, DONE, CANCELLED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  vendor          VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([vendorProfileId, plannedAt])
}

model Recipe {
  id                String             @id @default(cuid())
  vendorProfileId   String
  name              String
  description       String?
  instructions      String?
  yield             Float
  unit              String
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  products          Product[]
  recipeIngredients RecipeIngredient[]
  versions          RecipeVersion[]

  @@index([vendorProfileId, name])
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  recipeId     String
  ingredientId String
  qtyPerBatch  Float      // Keep as qtyPerBatch for schema consistency
  wastePct     Float      @default(0)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id])

  @@index([recipeId, ingredientId])
}

model RecipeVersion {
  id                       String                    @id @default(cuid())
  recipeId                 String
  version                  Int
  name                     String
  description              String?
  instructions             String?
  yield                    Float
  yieldUnit                String
  prepTime                 Int?
  cookTime                 Int?
  difficulty               String?
  totalCost                Float
  editorId                 String
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  recipeIngredientVersions RecipeIngredientVersion[]
  recipe                   Recipe                    @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId, version])
}

model RecipeIngredientVersion {
  id              String        @id @default(cuid())
  recipeVersionId String
  ingredientId    String
  quantity        Float
  unit            String
  notes           String?
  ingredient      Ingredient    @relation(fields: [ingredientId], references: [id])
  recipeVersion   RecipeVersion @relation(fields: [recipeVersionId], references: [id], onDelete: Cascade)

  @@index([recipeVersionId, ingredientId])
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  productId       String
  vendorProfileId String
  quantity        Int
  unitPrice       Float
  cogsUnit        Float?
  total           Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([vendorProfileId])
}

model AnalyticsEvent {
  id              String        @id @default(cuid())
  vendorProfileId String
  userId          String?
  productId       String?
  orderId         String?
  eventType       String
  eventData       Json?
  sessionId       String?
  createdAt       DateTime      @default(now())
  order           Order?        @relation(fields: [orderId], references: [id])
  product         Product?      @relation(fields: [productId], references: [id])
  user            User?         @relation(fields: [userId], references: [id])
  vendor          VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)

  @@index([vendorProfileId, eventType, createdAt])
  @@index([sessionId])
  @@index([createdAt])
}

model Conversation {
  id              String        @id @default(cuid())
  vendorProfileId String
  customerId      String
  subject         String?
  status          String        @default("open")
  tags            String?
  lastMessageAt   DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  vendor          VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  messages        Message[]
  issues          OrderIssue[]

  @@index([vendorProfileId, status, lastMessageAt])
  @@index([customerId, lastMessageAt])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderRole     String
  senderId       String
  body           String
  attachments    String?
  createdAt      DateTime     @default(now())
  readBy         String?
  sentiment      String?
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId, createdAt])
}

model OrderIssue {
  id             String       @id @default(cuid())
  conversationId String
  orderId        String
  type           String
  status         String       @default("open")
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@index([orderId, status])
}

model DiscountCode {
  id              String    @id @default(cuid())
  vendorProfileId String
  code            String    @unique
  amountType      String
  amount          Float
  expiresAt       DateTime?
  maxUses         Int?
  uses            Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([vendorProfileId, code])
}

model Supplier {
  id                   String       @id @default(cuid())
  vendorProfileId      String
  name                 String
  contact              String?
  createdAt            DateTime     @default(now())
  preferredIngredients Ingredient[] @relation("PreferredSupplier")

  @@index([vendorProfileId, name])
}

model VendorStripeAccount {
  vendorProfileId  String   @id
  accountId        String   @unique
  chargesEnabled   Boolean  @default(false)
  payoutsEnabled   Boolean  @default(false)
  detailsSubmitted Boolean  @default(false)
  updatedAt        DateTime @updatedAt
}

model Cart {
  id         String     @id @default(cuid())
  customerId String
  zip        String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  items      CartItem[]

  @@index([customerId])
}

model CartItem {
  id              String  @id @default(cuid())
  cartId          String
  productId       String
  vendorProfileId String
  qty             Int
  unitPrice       Float
  note            String?
  product         Product @relation(fields: [productId], references: [id])
  cart            Cart    @relation(fields: [cartId], references: [id])

  @@index([cartId])
  @@index([vendorProfileId])
}

model FulfillmentLocation {
  id              String              @id @default(cuid())
  vendorProfileId String
  name            String
  type            String
  address1        String?
  city            String?
  state           String?
  zip             String?
  active          Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  vendor          VendorProfile       @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  windows         FulfillmentWindow[]
  fulfillments    OrderFulfillment[]

  @@index([vendorProfileId, zip])
}

model FulfillmentWindow {
  id              String               @id @default(cuid())
  vendorProfileId String
  locationId      String?
  kind            String
  weekday         Int
  startTime       String
  endTime         String
  capacity        Int?
  active          Boolean              @default(true)
  location        FulfillmentLocation? @relation(fields: [locationId], references: [id])
  vendor          VendorProfile        @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)

  @@index([vendorProfileId, kind, weekday])
}

model OrderFulfillment {
  id                String               @id @default(cuid())
  orderId           String
  vendorProfileId   String
  status            String               @default("PENDING")
  method            String
  fulfillmentType   String?
  locationId        String?
  date              DateTime
  fee               Float                @default(0)
  trackingNumber    String?
  carrier           String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  etaLabel          String?
  predictedHours    Int?
  notes             String?
  order             Order                @relation(fields: [orderId], references: [id])
  location          FulfillmentLocation? @relation(fields: [locationId], references: [id])

  @@index([orderId, vendorProfileId])
}

model OrderEvent {
  id        String   @id @default(cuid())
  orderId   String
  actorId   String?
  actorRole String?
  type      String
  message   String?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])

  @@index([orderId, type, createdAt])
}

model CustomerProfile {
  id              String        @id @default(cuid())
  vendorProfileId String
  userId          String?
  email           String?
  phone           String?
  firstName       String?
  lastName        String?
  city            String?
  state           String?
  zip             String?
  tags            String?
  emailOptIn      Boolean       @default(false)
  smsOptIn        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tasks           CRMTask[]
  notes           ContactNote[]

  @@index([vendorProfileId, email])
  @@index([vendorProfileId, phone])
  @@index([vendorProfileId, lastName, firstName])
}

model ContactNote {
  id              String          @id @default(cuid())
  vendorProfileId String
  contactId       String
  authorId        String
  body            String
  createdAt       DateTime        @default(now())
  contact         CustomerProfile @relation(fields: [contactId], references: [id])

  @@index([vendorProfileId, contactId, createdAt])
}

model CRMTask {
  id              String          @id @default(cuid())
  vendorProfileId String
  contactId       String
  title           String
  status          String          @default("open")
  dueDate         DateTime?
  ownerId         String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  contact         CustomerProfile @relation(fields: [contactId], references: [id])

  @@index([vendorProfileId, status, dueDate])
}

model Segment {
  id              String   @id @default(cuid())
  vendorProfileId String
  name            String
  rulesJson       Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([vendorProfileId, name])
}

model ShippingAddress {
  id         String   @id @default(cuid())
  firstName  String?
  lastName   String?
  company    String?
  address1   String?
  address2   String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orders     Order[]

  @@index([postalCode])
}

// Stripe Integration Models
model StripePayment {
  id              String    @id @default(cuid())
  stripePaymentId String    @unique
  vendorProfileId String
  orderId         String?
  amount          Float
  fee             Float
  net             Float
  currency        String    @default("usd")
  status          String
  createdAt       DateTime
  updatedAt       DateTime  @updatedAt
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)

  @@index([vendorProfileId, createdAt])
  @@index([stripePaymentId])
}

model StripeBalanceTransaction {
  id                  String    @id @default(cuid())
  stripeTransactionId String    @unique
  vendorProfileId     String
  amount              Float
  fee                 Float
  net                 Float
  currency            String    @default("usd")
  type                String
  description         String?
  source              String
  createdAt           DateTime
  updatedAt           DateTime  @updatedAt
  vendorProfile       VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)

  @@index([vendorProfileId, createdAt])
  @@index([stripeTransactionId])
}

model StripePayout {
  id              String    @id @default(cuid())
  stripePayoutId  String    @unique
  vendorProfileId String
  amount          Float
  currency        String    @default("usd")
  status          String
  description     String?
  arrivalDate     DateTime
  createdAt       DateTime
  updatedAt       DateTime  @updatedAt
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)

  @@index([vendorProfileId, arrivalDate])
  @@index([stripePayoutId])
}

model Market {
  id            String               @id @default(cuid())
  title         String
  description   String?
  startsAt      DateTime
  endsAt        DateTime
  locationId    String?
  status        MarketStatus         @default(PLANNED)
  capacity      Int?
  rules         Json?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  registrations MarketRegistration[]
}

model MarketRegistration {
  id        String             @id @default(cuid())
  marketId  String
  vendorId  String
  booth     String?
  feeCents  Int?
  status    RegistrationStatus @default(PENDING)
  notes     String?
  createdAt DateTime           @default(now())
  market    Market             @relation(fields: [marketId], references: [id])
}

model SalesWindow {
  id                  String   @id @default(cuid())
  vendorId            String
  type                SalesWindowType
  name                String
  description         String?
  status              SalesWindowStatus @default(DRAFT)

  location_name       String?
  address_text        String?

  static_map_mode     StaticMapMode      @default(NONE)
  static_map_image_url String?
  static_map_tile_url_template String?

  vendor_vehicle_image_url String?
  vendor_vehicle_plate      String?

  // Delivery
  epicenter_address   String?
  radius_miles        Float?
  delivery_fee_mode   DeliveryFeeMode    @default(NONE)
  delivery_fee_json   String?            // JSON stored as string

  third_party_delivery String?           // JSON stored as string

  // Timing (not used for Service-Greenfield if evergreen)
  preorder_open_at    DateTime?
  preorder_close_at   DateTime?
  fulfill_start_at    DateTime?
  fulfill_end_at      DateTime?
  recurrence_rrule    String?
  parent_series_id    String?

  // Service – Greenfield
  is_always_on        Boolean @default(false)
  scheduling_mode     SchedulingMode?
  scheduler_config    String?            // JSON stored as string

  // Capacity
  capacity_total      Int?
  slot_size_min       Int?
  slot_capacity       Int?
  max_items_total     Int?    // NEW
  auto_close_when_full Boolean @default(true)

  // Porch/Kiosk
  porch_instructions  String?
  kiosk_name          String?
  kiosk_instructions  String?

  policy_json         String?            // JSON stored as string
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  products            SalesWindowProduct[]
  slots               SalesWindowSlot[]
  metrics             SalesWindowMetric?
  consignment         ConsignmentLedger[]
  wholesaleInvoices   WholesaleInvoice[]
  qrTokens            QrToken[]

  @@index([vendorId, status, fulfill_start_at])
}

model SalesWindowProduct {
  id               String @id @default(cuid())
  salesWindowId    String
  productId        String
  price_override   Float?
  qty_limit_per_customer Int?
  active           Boolean @default(true)
  salesWindow      SalesWindow @relation(fields: [salesWindowId], references: [id], onDelete: Cascade)

  @@index([salesWindowId, productId])
}

model SalesWindowSlot {
  id               String @id @default(cuid())
  salesWindowId    String
  starts_at        DateTime
  ends_at          DateTime
  capacity         Int
  reserved_count   Int   @default(0)
  salesWindow      SalesWindow @relation(fields: [salesWindowId], references: [id], onDelete: Cascade)

  @@index([salesWindowId, starts_at])
}

model SalesWindowMetric {
  id            String @id @default(cuid())
  salesWindowId String @unique
  orders_count  Int    @default(0)
  items_count   Int    @default(0)
  gross         Float  @default(0)
  refunds       Float  @default(0)
  net           Float  @default(0)
  salesWindow   SalesWindow @relation(fields: [salesWindowId], references: [id], onDelete: Cascade)
}

model ConsignmentLedger {
  id            String @id @default(cuid())
  salesWindowId String
  productId     String
  planned_qty   Int
  sold_qty      Int   @default(0)
  unsold_qty    Int   @default(0)
  donated_qty   Int   @default(0)
  returned_qty  Int   @default(0)
  rev_share_pct Float?
  host_fee_fixed Float?
  salesWindow   SalesWindow @relation(fields: [salesWindowId], references: [id], onDelete: Cascade)

  @@index([salesWindowId])
}

model WholesaleInvoice {
  id            String @id @default(cuid())
  salesWindowId String
  business_name String
  terms         WholesaleTerms
  status        InvoiceStatus @default(DRAFT)
  subtotal      Float @default(0)
  tax           Float @default(0)
  shipping      Float @default(0)
  total         Float @default(0)
  due_date      DateTime?
  salesWindow   SalesWindow @relation(fields: [salesWindowId], references: [id], onDelete: Cascade)
  lines         WholesaleInvoiceLine[]

  @@index([salesWindowId, status])
}

model WholesaleInvoiceLine {
  id         String @id @default(cuid())
  invoiceId  String
  productId  String
  qty        Int
  unit_price Float
  line_total Float
  invoice    WholesaleInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model QrToken {
  id            String @id @default(cuid())
  salesWindowId String
  token         String  @unique
  kind          QrKind
  expires_at    DateTime?
  salesWindow   SalesWindow @relation(fields: [salesWindowId], references: [id], onDelete: Cascade)

  @@index([salesWindowId, kind])
}

model OrderCustomerVehicle {
  id      String @id @default(cuid())
  orderId String @unique
  make_model String
  color     String
  plate     String?
  notes     String?
  walkup    Boolean @default(false)
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// Label System Models
model PrinterProfile {
  id            String        @id @default(cuid())
  vendorProfileId String
  name          String
  driver        PrinterDriver
  dpi           Int           @default(300)
  maxWidthIn    Float         @default(4.0)
  maxHeightIn   Float         @default(6.0)
  mediaTypes    String        @default("[]") // JSON array of media types
  networkAddress String?      // IP address or network path
  status        PrinterStatus @default(ACTIVE)
  lastSeenAt    DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  labelProfiles LabelProfile[]
  labelJobs     LabelJob[]

  vendorProfile VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)

  @@index([vendorProfileId])
  @@index([status])
}

model LabelProfile {
  id              String        @id @default(cuid())
  vendorProfileId String
  printerProfileId String
  templateId      String?
  name            String
  description     String?
  widthIn         Float         @default(4.0)
  heightIn        Float         @default(6.0)
  orientation     LabelOrientation @default(PORTRAIT)
  cornerRadiusIn  Float?        @default(0.0)
  copies          Int           @default(1)
  engine          LabelEngine   @default(ZPL)
  status          LabelStatus   @default(ACTIVE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  labelJobs       LabelJob[]

  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  printerProfile  PrinterProfile @relation(fields: [printerProfileId], references: [id], onDelete: Cascade)
  template        LabelTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@index([vendorProfileId])
  @@index([status])
}

model LabelTemplate {
  id              String        @id @default(cuid())
  vendorProfileId String
  title           String
  description     String?
  schema          String        // JSON schema for template
  version         String        @default("1.0.0")
  isSystem        Boolean       @default(false)
  lastPublishedAt DateTime?
  status          TemplateStatus @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  labelProfiles   LabelProfile[]

  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)

  @@index([vendorProfileId])
  @@index([status])
  @@index([isSystem])
}

model LabelJob {
  id               String        @id @default(cuid())
  vendorProfileId  String
  printerProfileId String
  labelProfileId   String
  requestedByUserId String
  status           JobStatus     @default(QUEUED)
  source           JobSource     @default(ORDER)
  sourceId         String
  payload          String        // JSON payload with resolved data
  renderOutputUrl  String?
  error            String?
  copies           Int           @default(1)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  completedAt      DateTime?

  vendorProfile    VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  printerProfile   PrinterProfile @relation(fields: [printerProfileId], references: [id], onDelete: Cascade)
  labelProfile     LabelProfile @relation(fields: [labelProfileId], references: [id], onDelete: Cascade)
  requestedBy      User @relation(fields: [requestedByUserId], references: [id])

  @@index([vendorProfileId])
  @@index([status])
  @@index([source, sourceId])
  @@index([createdAt])
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
  REFUNDED
}

enum Role {
  VENDOR
  ADMIN
  CUSTOMER
}

enum TaxAlertType {
  OVERDUE
  REMINDER
  PAYMENT_CONFIRMED
}

enum WalletTransactionType {
  DEBIT
  CREDIT
}

enum MarketStatus {
  PLANNED
  ACTIVE
  COMPLETE
  CANCELED
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum SalesWindowStatus {
  DRAFT
  SCHEDULED
  OPEN
  CLOSED
  FULFILLED
  CANCELLED
}

enum SalesWindowType {
  PARK_PICKUP
  DELIVERY
  CONSIGNMENT
  WHOLESALE
  MARKET
  PORCH_PICKUP
  KIOSK_PICKUP
  SERVICE_GREENFIELD
}

enum StaticMapMode {
  NONE
  UPLOAD
  TILE_URL
}

enum DeliveryFeeMode {
  NONE
  FLAT
  TIERED
  FREE_OVER
}

enum SchedulingMode {
  VENDOR_CONTACT
  SCHEDULER
}

enum WholesaleTerms {
  COD
  NET30
  NET60
  NET90
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  VOID
}

enum QrKind {
  WINDOW
  PRODUCT
  ORDER_PICKUP
}

enum FulfillmentContextType {
  NONE
  MARKET
  WINDOW
}

// Label System Enums
enum PrinterDriver {
  ZPL
  BROTHER_QL
  PDF
}

enum PrinterStatus {
  ACTIVE
  INACTIVE
  OFFLINE
}

enum LabelOrientation {
  PORTRAIT
  LANDSCAPE
}

enum LabelEngine {
  ZPL
  BROTHER_QL
  PDF
}

enum LabelStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum TemplateStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// AI INSIGHTS SYSTEM TABLES

model ProductCompetitorPrice {
  id             String    @id @default(cuid())
  vendorProfileId String   // For vendor isolation
  productId      String
  competitorName String
  competitorSku  String?
  price          Float
  currency       String    @default("USD")
  sourceUrl      String?
  capturedAt     DateTime  @default(now())
  createdAt      DateTime  @default(now())
  
  // Relations
  vendor         VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([vendorProfileId, productId, capturedAt(sort: Desc)])
  @@index([competitorName])
}

model ProductPriceHistory {
  id             String    @id @default(cuid())
  vendorProfileId String   // For vendor isolation
  productId      String
  oldPrice       Float?
  newPrice       Float
  changedBy      String    // 'vendor' | 'system' | 'ai_suggest'
  reason         String?
  createdAt      DateTime  @default(now())
  
  // Relations
  vendor         VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([vendorProfileId, productId, createdAt(sort: Desc)])
}

model InventorySupplierOffer {
  id               String    @id @default(cuid())
  vendorProfileId  String    // For vendor isolation
  inventoryItemId  String
  supplierName     String
  packSize         Int
  unitCost         Float
  bulkBreakQty     Int?
  bulkUnitCost     Float?
  shippingCostEst  Float?
  validFrom        DateTime  @default(now())
  validTo          DateTime?
  sourceUrl        String?
  createdAt        DateTime  @default(now())
  
  // Relations
  vendor           VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  inventoryItem    InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  
  @@index([vendorProfileId, inventoryItemId])
  @@index([supplierName])
}

model InventoryPurchaseOrder {
  id                  String    @id @default(cuid())
  vendorProfileId     String    // For vendor isolation
  status              String    @default("draft") // 'draft' | 'sent' | 'received'
  totalEstimatedCost  Float?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  vendor              VendorProfile                @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  lines               InventoryPurchaseOrderLine[]
  
  @@index([vendorProfileId, status])
}

model InventoryPurchaseOrderLine {
  id                  String    @id @default(cuid())
  purchaseOrderId     String
  inventoryItemId     String
  qty                 Int
  unitCostEst         Float
  createdAt           DateTime  @default(now())
  
  // Relations
  purchaseOrder       InventoryPurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  inventoryItem       InventoryItem          @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  
  @@index([purchaseOrderId])
  @@index([inventoryItemId])
}

enum JobStatus {
  QUEUED
  RENDERING
  PRINTING
  COMPLETED
  FAILED
  CANCELLED
}

enum JobSource {
  ORDER
  PRODUCT
  MANUAL
}

// Product System Enums
enum ProductType {
  FOOD
  NON_FOOD
  SERVICE
}

// New Product System Models
model Category {
  id              String        @id @default(cuid())
  vendorProfileId String
  name            String
  parentId        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  vendor          VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  parent          Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[]    @relation("CategoryHierarchy")
  products        Product[]
  subcategories   Subcategory[]
  
  @@index([vendorProfileId])
  @@index([parentId])
}

model Subcategory {
  id              String        @id @default(cuid())
  vendorProfileId String
  categoryId      String
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  vendor          VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products        Product[]
  
  @@index([vendorProfileId])
  @@index([categoryId])
}

model ProductVariant {
  id          String  @id @default(cuid())
  productId   String
  name        String
  sku         String?
  priceDelta  Float   @default(0)
  isDefault   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
}

model ProductMaterial {
  id              String  @id @default(cuid())
  productId       String
  inventoryItemId String
  qty             Float
  unit            String
  wastePct        Float   @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@index([inventoryItemId])
}

model RecipeParseJob {
  id              String              @id @default(cuid())
  vendorProfileId String
  sourceType      RecipeSourceType
  sourceUrl       String?
  status          RecipeParseStatus   @default(PENDING)
  rawText         String?
  parsedJson      Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  vendor          VendorProfile       @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  
  @@index([vendorProfileId])
  @@index([status])
}

enum RecipeSourceType {
  IMAGE
  PDF
  TEXT
  URL
}

enum RecipeParseStatus {
  PENDING
  DONE
  FAILED
}
