// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String?
  zip_code       String?
  loyalty_member Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  orders         Order[]
  analyticsEvents AnalyticsEvent[]
  vendorProfile  VendorProfile?

  @@index([zip_code])
}

model VendorProfile {
  id          String   @id @default(cuid())
  user_id     String   @unique
  business_name String
  description String?
  category    String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  products    Product[]
  orders      Order[]
  analyticsEvents AnalyticsEvent[]
}

model Product {
  id             String   @id @default(cuid())
  vendor_id      String
  name           String
  description    String?
  price          Decimal  @db.Decimal(10, 2)
  category       String?
  stock_quantity Int      @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  vendor        VendorProfile @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  analyticsEvents AnalyticsEvent[]

  @@index([vendor_id])
  @@index([created_at])
}

model Order {
  id           String   @id @default(cuid())
  user_id      String
  vendor_id    String
  total_amount Decimal  @db.Decimal(10, 2)
  status       String   @default("pending") // pending, completed, delivered, cancelled
  order_date   DateTime @default(now())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  user         User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  vendor       VendorProfile @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]
  analyticsEvents AnalyticsEvent[]

  @@index([vendor_id, created_at])
  @@index([user_id])
}

model OrderItem {
  id         String  @id @default(cuid())
  order_id   String
  product_id String
  quantity   Int
  price      Decimal @db.Decimal(10, 2)
  cogsUnit   Decimal? @db.Decimal(10, 4) // COGS snapshot at sale time
  created_at DateTime @default(now())

  // Relations
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
}

// New Analytics Event Model for Conversion Funnel Tracking
model AnalyticsEvent {
  id          String   @id @default(cuid())
  vendor_id   String
  user_id     String?
  product_id  String?
  order_id    String?
  event_type  String   // page_view, add_to_cart, checkout_started, purchase_completed, cart_abandoned
  event_data  Json?    // Additional event-specific data
  session_id  String?  // To track user sessions
  created_at  DateTime @default(now())

  // Relations
  vendor      VendorProfile @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
  user        User?         @relation(fields: [user_id], references: [id], onDelete: SetNull)
  product     Product?      @relation(fields: [product_id], references: [id], onDelete: SetNull)
  order       Order?        @relation(fields: [order_id], references: [id], onDelete: SetNull)

  @@index([vendor_id, event_type, created_at])
  @@index([session_id])
  @@index([created_at])
}
