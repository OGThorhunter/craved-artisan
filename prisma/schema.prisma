// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String?
  zip_code       String?
  loyalty_member Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  orders         Order[]
  analyticsEvents AnalyticsEvent[]
  vendorProfile  VendorProfile?

  @@index([zip_code])
}

model VendorProfile {
  id          String   @id @default(cuid())
  user_id     String   @unique
  business_name String
  description String?
  category    String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  products    Product[]
  analyticsEvents AnalyticsEvent[]
}

model Product {
  id             String   @id @default(cuid())
  vendor_id      String
  name           String
  description    String?
  price          Decimal  @db.Decimal(10, 2)
  category       String?
  stock_quantity Int      @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  vendor        VendorProfile @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  cartItems     CartItem[]
  analyticsEvents AnalyticsEvent[]
  recipeId      String?      // link to Recipe
  recipe        Recipe?      @relation(fields: [recipeId], references: [id])

  @@index([vendor_id])
  @@index([created_at])
}

model Order {
  id              String   @id @default(cuid())
  customerId      String
  zip             String?
  status          String   @default("pending") // pending|paid|failed|refunded|cancelled
  paymentIntentId String?  // pi_*
  transferGroup   String?  // order_<id>
  total           Decimal  @db.Decimal(10, 2) @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user         User       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]
  analyticsEvents AnalyticsEvent[]

  @@index([customerId, createdAt])
}

// Inventory and Recipe Models
model Ingredient {
  id          String   @id @default(cuid())
  vendorId    String
  name        String
  unit        String        // "g","kg","ml","l","unit"
  costPerUnit Decimal       @db.Decimal(10, 4) // cost per 1 unit
  tags        String[]      @default([])
  preferredSupplierId String?
  leadTimeDays       Int?      // default null -> use global
  minOrderQty        Decimal?  @db.Decimal(10, 4) // optional MOQ
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  inventory   IngredientInventory[]
  transactions InventoryTx[]
  recipeItems RecipeItem[]
  preferredSupplier Supplier? @relation("PreferredSupplier", fields: [preferredSupplierId], references: [id])

  @@index([vendorId, name])
}

model IngredientInventory {
  id          String   @id @default(cuid())
  vendorId    String
  ingredientId String
  quantity    Decimal   @db.Decimal(10, 4) // current on-hand in 'unit'
  costBasis   Decimal   @db.Decimal(10, 4) // weighted avg cost per unit
  updatedAt   DateTime @updatedAt

  ingredient  Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([vendorId, ingredientId])
  @@index([vendorId, ingredientId])
}

model InventoryTx {
  id          String   @id @default(cuid())
  vendorId    String
  ingredientId String
  type        String   // "purchase" | "sale" | "adjustment" | "waste"
  quantity    Decimal  @db.Decimal(10, 4) // + for purchase/adjustment; - for sale/waste
  unitCost    Decimal  @db.Decimal(10, 4) // cost per unit at time of tx
  note        String?
  createdAt   DateTime @default(now())

  ingredient  Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  @@index([vendorId, ingredientId, type, createdAt])
}

model Recipe {
  id        String   @id @default(cuid())
  vendorId  String
  name      String
  yieldQty  Decimal   @db.Decimal(10, 4) // how many "units" of finished product per batch
  unit      String    // finished unit label ("loaf","bar","jar")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  items     RecipeItem[]
  products  Product[] // if Product already exists; else use relation field below
  @@index([vendorId, name])
}

model RecipeItem {
  id           String   @id @default(cuid())
  recipeId     String
  ingredientId String
  qtyPerBatch  Decimal   @db.Decimal(10, 4) // in Ingredient.unit
  wastePct     Decimal   @default(0) @db.Decimal(5, 4) // 0..1

  recipe     Recipe     @relation(fields: [recipeId], references: [id])
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])

  @@index([recipeId, ingredientId])
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  vendorId   String
  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  cogsUnit   Decimal? @db.Decimal(10, 4) // COGS snapshot at sale time
  subtotal   Decimal @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([vendorId])
}

// New Analytics Event Model for Conversion Funnel Tracking
model AnalyticsEvent {
  id          String   @id @default(cuid())
  vendor_id   String
  user_id     String?
  product_id  String?
  order_id    String?
  event_type  String   // page_view, add_to_cart, checkout_started, purchase_completed, cart_abandoned
  event_data  Json?    // Additional event-specific data
  session_id  String?  // To track user sessions
  created_at  DateTime @default(now())

  // Relations
  vendor      VendorProfile @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
  user        User?         @relation(fields: [user_id], references: [id], onDelete: SetNull)
  product     Product?      @relation(fields: [product_id], references: [id], onDelete: SetNull)
  order       Order?        @relation(fields: [order_id], references: [id], onDelete: SetNull)

  @@index([vendor_id, event_type, created_at])
  @@index([session_id])
  @@index([created_at])
}

// Messaging & Customer Service Models
model Conversation {
  id            String   @id @default(cuid())
  vendorId      String
  customerId    String
  subject       String?
  status        String   @default("open") // open|awaiting_customer|awaiting_vendor|resolved|archived
  tags          String[] @default([])
  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  messages      Message[]
  issues        OrderIssue[]

  @@index([vendorId, status, lastMessageAt])
  @@index([customerId, lastMessageAt])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderRole     String   // vendor|customer|system
  senderId       String
  body           String
  attachments    String[] @default([])
  createdAt      DateTime @default(now())
  readBy         String[] @default([]) // user ids who have read
  sentiment      String?  // optional: positive|neutral|negative

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  @@index([conversationId, createdAt])
}

model OrderIssue {
  id             String   @id @default(cuid())
  conversationId String
  orderId        String
  type           String // refund|return|missing|damaged|delay|question
  status         String @default("open") // open|needs_info|resolved|rejected
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  @@index([orderId, status])
}

model DiscountCode {
  id          String   @id @default(cuid())
  vendorId    String
  code        String   @unique
  amountType  String   // percent|fixed
  amount      Decimal  @db.Decimal(10, 2)
  expiresAt   DateTime?
  maxUses     Int?
  uses        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([vendorId, code])
}

model Supplier {
  id        String   @id @default(cuid())
  vendorId  String
  name      String
  contact   String?
  createdAt DateTime @default(now())
  
  // Relations
  preferredIngredients Ingredient[] @relation("PreferredSupplier")

  @@index([vendorId, name])
}

// Checkout and Payment Models
model VendorStripeAccount {
  vendorId        String   @id
  accountId       String   @unique       // acct_*
  chargesEnabled  Boolean  @default(false)
  payoutsEnabled  Boolean  @default(false)
  detailsSubmitted Boolean @default(false)
  updatedAt       DateTime @updatedAt
}

model Cart {
  id         String  @id @default(cuid())
  customerId String
  zip        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  items      CartItem[]

  @@index([customerId])
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  vendorId  String
  qty       Int
  unitPrice Decimal @db.Decimal(10, 2)
  note      String?

  cart   Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([cartId])
  @@index([vendorId])
}
