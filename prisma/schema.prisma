// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?  // Optional name field
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile        Profile?
  vendorProfile  VendorProfile?
  products       Product[]
  orders         Order[]
  reviews        Review[]
  favorites      Favorite[]
  addresses      Address[]

  @@map("users")
}

model Profile {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  bio         String?
  website     String?
  socialLinks Json?    // Store social media links as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model VendorProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeName String
  slug      String   @unique
  bio       String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vendor_profiles")
}

model Address {
  id          String   @id @default(uuid())
  type        AddressType
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal
  comparePrice Decimal?
  images      String[] // Array of image URLs
  category    String
  tags        String[] // Array of tags
  inStock     Boolean  @default(true)
  stockQuantity Int    @default(0)
  weight      Decimal?
  dimensions  Json?    // Store dimensions as JSON
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  reviews   Review[]
  favorites Favorite[]

  @@map("products")
}

model Order {
  id            String      @id @default(uuid())
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)
  subtotal      Decimal
  tax           Decimal     @default(0)
  shipping      Decimal     @default(0)
  total         Decimal
  notes         String?
  trackingNumber String?
  shippedAt     DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingAddressId String
  shippingAddress Address @relation(fields: [shippingAddressId], references: [id])
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  quantity  Int
  price     Decimal
  total     Decimal

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

enum Role {
  CUSTOMER
  VENDOR
  ADMIN
  SUPPLIER
  EVENT_COORDINATOR
  DROPOFF
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
} 