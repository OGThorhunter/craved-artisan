// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String?
  firstName      String?
  lastName       String?
  phone          String?
  zip_code       String?
  loyalty_member Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  orders         Order[]
  analyticsEvents AnalyticsEvent[]
  vendorProfile  VendorProfile?

  @@index([zip_code])
}

model VendorProfile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  storeName             String   // Changed from business_name
  bio                   String?  // Changed from description
  imageUrl              String?
  slug                  String   @unique
  stripeAccountId       String?
  stripeAccountStatus   String?
  stripeOnboardingUrl   String?
  minMarginPercent      Float?
  marginOverrideEnabled Boolean  @default(false)
  tags                  String? // Add vendor tags/categories (comma-separated)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products    Product[]
  analyticsEvents AnalyticsEvent[]
  fulfillmentWindows FulfillmentWindow[]
  fulfillmentLocations FulfillmentLocation[]
  conversations Conversation[]

  @@index([userId])
}

model Product {
  id                String   @id @default(cuid())
  vendorProfileId   String   // Changed from vendor_id
  name              String
  description       String?
  price             Float
  cost              Float? // Added cost field
  imageUrl          String?
  tags              String? // Changed from category (comma-separated)
  stock             Int      @default(0) // Changed from stock_quantity
  isAvailable       Boolean  @default(true)
  targetMargin      Float?
  marginAlert       Boolean  @default(false)
  alertNote         String?
  onWatchlist       Boolean  @default(false)
  lastAiSuggestion  DateTime?
  aiSuggestionNote  String?
  taxCode           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  vendor        VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  cartItems     CartItem[]
  analyticsEvents AnalyticsEvent[]
  recipeId      String?      // link to Recipe
  recipe        Recipe?      @relation(fields: [recipeId], references: [id])

  @@index([vendorProfileId])
  @@index([createdAt])
}

model Order {
  id              String   @id @default(cuid())
  userId          String   // Changed from customerId to match services
  orderNumber     String   @unique // Add order number for display
  zip             String?
  status          OrderStatus @default(PENDING)
  paymentIntentId String?  // pi_*
  transferGroup   String?  // order_<id>
  subtotal        Float  @default(0)
  tax             Float  @default(0)
  shipping        Float  @default(0)
  total           Float  @default(0)
  shippingZip     String?
  deliveryDay     String?
  deliveryStatus  String?  // Add delivery status
  deliveryTimestamp DateTime?
  notes           String?
  shippingAddressId String? // Add shipping address reference
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]
  analyticsEvents AnalyticsEvent[]
  fulfillments OrderFulfillment[]
  events       OrderEvent[]
  shippingAddress ShippingAddress? @relation(fields: [shippingAddressId], references: [id])

  @@index([userId, createdAt])
}

// Inventory and Recipe Models
model Ingredient {
  id          String   @id @default(cuid())
  vendorProfileId String // Changed from vendorId
  name        String
  description String?
  unit        String        // "g","kg","ml","l","unit"
  costPerUnit Float       // cost per 1 unit
  tags        String?      // comma-separated
  isAvailable Boolean       @default(true)
  supplier    String?
  preferredSupplierId String?
  leadTimeDays       Int?      // default null -> use global
  minOrderQty        Float?  // optional MOQ
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  inventory   IngredientInventory[]
  transactions InventoryTx[]
  recipeIngredients RecipeIngredient[]
  recipeIngredientVersions RecipeIngredientVersion[]
  preferredSupplier Supplier? @relation("PreferredSupplier", fields: [preferredSupplierId], references: [id])

  @@index([vendorProfileId, name])
}

model IngredientInventory {
  id          String   @id @default(cuid())
  vendorProfileId String // Changed from vendorId
  ingredientId String
  quantity    Float   // current on-hand in 'unit'
  costBasis   Float   // weighted avg cost per unit
  updatedAt   DateTime @updatedAt

  ingredient  Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([vendorProfileId, ingredientId])
  @@index([vendorProfileId, ingredientId])
}

model InventoryTx {
  id          String   @id @default(cuid())
  vendorProfileId String // Changed from vendorId
  ingredientId String
  type        String   // "purchase" | "sale" | "adjustment" | "waste"
  quantity    Float  // + for purchase/adjustment; - for sale/waste
  unitCost    Float  // cost per unit at time of tx
  note        String?
  createdAt   DateTime @default(now())

  ingredient  Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  @@index([vendorProfileId, ingredientId, type, createdAt])
}

model Recipe {
  id                String   @id @default(cuid())
  vendorProfileId   String   // Changed from vendorId
  name              String
  description       String?
  instructions      String?
  yield             Float   // Changed from yieldQty
  unit              String    // finished unit label ("loaf","bar","jar")
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  recipeIngredients RecipeIngredient[] // Changed from items
  products          Product[] // if Product already exists; else use relation field below
  versions          RecipeVersion[] // Add versions relation
  @@index([vendorProfileId, name])
}

model RecipeIngredient {
  id           String   @id @default(cuid())
  recipeId     String
  ingredientId String
  qtyPerBatch  Float   // in Ingredient.unit
  wastePct     Float   @default(0) // 0..1

  recipe     Recipe     @relation(fields: [recipeId], references: [id])
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])

  @@index([recipeId, ingredientId])
}

model RecipeVersion {
  id                String   @id @default(cuid())
  recipeId          String
  version           Int
  name              String
  description       String?
  instructions      String?
  yield             Float
  yieldUnit         String
  prepTime          Int?
  cookTime          Int?
  difficulty        String?
  totalCost         Float
  editorId          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  recipe                    Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeIngredientVersions  RecipeIngredientVersion[]

  @@index([recipeId, version])
}

model RecipeIngredientVersion {
  id                String   @id @default(cuid())
  recipeVersionId   String
  ingredientId      String
  quantity          Float
  unit              String
  notes             String?

  // Relations
  recipeVersion     RecipeVersion @relation(fields: [recipeVersionId], references: [id], onDelete: Cascade)
  ingredient        Ingredient @relation(fields: [ingredientId], references: [id])

  @@index([recipeVersionId, ingredientId])
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  vendorProfileId String // Changed from vendorId
  quantity   Int
  unitPrice  Float
  cogsUnit   Float? // COGS snapshot at sale time
  total      Float // Changed from subtotal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([vendorProfileId])
}

// New Analytics Event Model for Conversion Funnel Tracking
model AnalyticsEvent {
  id          String   @id @default(cuid())
  vendorProfileId String // Changed from vendor_id
  userId      String? // Changed from user_id
  productId   String? // Changed from product_id
  orderId     String? // Changed from order_id
  eventType   String   // Changed from event_type - page_view, add_to_cart, checkout_started, purchase_completed, cart_abandoned
  eventData   Json?    // Changed from event_data - Additional event-specific data
  sessionId   String?  // Changed from session_id - To track user sessions
  createdAt   DateTime @default(now()) // Changed from created_at

  // Relations
  vendor      VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  user        User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  product     Product?      @relation(fields: [productId], references: [id], onDelete: SetNull)
  order       Order?        @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([vendorProfileId, eventType, createdAt])
  @@index([sessionId])
  @@index([createdAt])
}

// Messaging & Customer Service Models
model Conversation {
  id            String   @id @default(cuid())
  vendorProfileId String // Changed from vendorId
  customerId    String
  subject       String?
  status        String   @default("open") // open|awaiting_customer|awaiting_vendor|resolved|archived
  tags          String? // comma-separated
  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  vendor        VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  messages      Message[]
  issues        OrderIssue[]

  @@index([vendorProfileId, status, lastMessageAt])
  @@index([customerId, lastMessageAt])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderRole     String   // vendor|customer|system
  senderId       String
  body           String
  attachments    String? // comma-separated URLs
  createdAt      DateTime @default(now())
  readBy         String? // user ids who have read (comma-separated)
  sentiment      String?  // optional: positive|neutral|negative

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  @@index([conversationId, createdAt])
}

model OrderIssue {
  id             String   @id @default(cuid())
  conversationId String
  orderId        String
  type           String // refund|return|missing|damaged|delay|question
  status         String @default("open") // open|needs_info|resolved|rejected
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  @@index([orderId, status])
}

model DiscountCode {
  id          String   @id @default(cuid())
  vendorProfileId String // Changed from vendorId
  code        String   @unique
  amountType  String   // percent|fixed
  amount      Float
  expiresAt   DateTime?
  maxUses     Int?
  uses        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([vendorProfileId, code])
}

model Supplier {
  id        String   @id @default(cuid())
  vendorProfileId String // Changed from vendorId
  name      String
  contact   String?
  createdAt DateTime @default(now())
  
  // Relations
  preferredIngredients Ingredient[] @relation("PreferredSupplier")

  @@index([vendorProfileId, name])
}

// Checkout and Payment Models
model VendorStripeAccount {
  vendorProfileId String   @id // Changed from vendorId
  accountId       String   @unique       // acct_*
  chargesEnabled  Boolean  @default(false)
  payoutsEnabled  Boolean  @default(false)
  detailsSubmitted Boolean @default(false)
  updatedAt       DateTime @updatedAt
}

model Cart {
  id         String  @id @default(cuid())
  customerId String
  zip        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  items      CartItem[]



  @@index([customerId])
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  vendorProfileId String // Changed from vendorId
  qty       Int
  unitPrice Float
  note      String?

  cart   Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([cartId])
  @@index([vendorProfileId])
}

// Fulfillment & Order Lifecycle Models
model FulfillmentLocation {
  id        String  @id @default(cuid())
  vendorProfileId String // Changed from vendorId
  name      String
  type      String   // "pickup" | "dropoff" | "delivery_hub"
  address1  String?
  city      String?
  state     String?
  zip       String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vendor     VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  windows    FulfillmentWindow[]
  fulfillments OrderFulfillment[]
  @@index([vendorProfileId, zip])
}

model FulfillmentWindow {
  id         String  @id @default(cuid())
  vendorProfileId String // Changed from vendorId
  locationId String?
  kind       String   // "pickup" | "delivery"
  // weekly recurrence (cron-ish): 0=Sun .. 6=Sat
  weekday    Int
  startTime  String   // "09:00"
  endTime    String   // "12:00"
  capacity   Int?     // optional cap per window
  active     Boolean  @default(true)

  // Relations
  vendor     VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  location   FulfillmentLocation? @relation(fields: [locationId], references: [id])
  @@index([vendorProfileId, kind, weekday])
}

model OrderFulfillment {
  id         String  @id @default(cuid())
  orderId    String
  vendorProfileId String // Changed from vendorId
  status     String  @default("PENDING") // Add status field
  method     String  // "pickup" | "delivery" | "ship"
  fulfillmentType String? // Add fulfillment type
  locationId String?
  date       DateTime
  fee        Float  @default(0)
  trackingNumber String?
  carrier    String?
  estimatedDelivery DateTime?
  actualDelivery DateTime?
  etaLabel   String?
  predictedHours Int?
  notes      String?

  location   FulfillmentLocation? @relation(fields: [locationId], references: [id])
  order      Order @relation(fields: [orderId], references: [id])

  @@index([orderId, vendorProfileId])
}

model OrderEvent {
  id        String  @id @default(cuid())
  orderId   String
  actorId   String?
  actorRole String? // "system"|"vendor"|"customer"|"admin"
  type      String  // "created"|"paid"|"scheduled"|"ready"|"picked_up"|"delivered"|"canceled"|"refunded"
  message   String?
  createdAt DateTime @default(now())

  order     Order @relation(fields: [orderId], references: [id])
  @@index([orderId, type, createdAt])
}

// CRM Models
model CustomerProfile {
  id           String   @id @default(cuid())
  vendorProfileId String // Changed from vendorId
  userId       String?          // if the buyer has an account
  email        String?
  phone        String?
  firstName    String?
  lastName     String?
  city         String?
  state        String?
  zip          String?
  tags         String? // comma-separated
  emailOptIn   Boolean  @default(false)
  smsOptIn     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  notes        ContactNote[]
  tasks        CRMTask[]

  @@index([vendorProfileId, email])
  @@index([vendorProfileId, phone])
  @@index([vendorProfileId, lastName, firstName])
}

model ContactNote {
  id         String   @id @default(cuid())
  vendorProfileId String // Changed from vendorId
  contactId  String
  authorId   String
  body       String
  createdAt  DateTime @default(now())

  contact    CustomerProfile @relation(fields: [contactId], references: [id])
  @@index([vendorProfileId, contactId, createdAt])
}

model CRMTask {
  id         String   @id @default(cuid())
  vendorProfileId String // Changed from vendorId
  contactId  String
  title      String
  status     String   @default("open")  // open|in_progress|done
  dueDate    DateTime?
  ownerId    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  contact    CustomerProfile @relation(fields: [contactId], references: [id])
  @@index([vendorProfileId, status, dueDate])
}

model Segment {
  id        String   @id @default(cuid())
  vendorProfileId String // Changed from vendorId
  name      String
  // simple JSON rules, e.g. { "any":[ {"field":"tags","op":"has","value":"VIP"}, {"field":"totalOrders","op":">=","value":3 } ] }
  rulesJson Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vendorProfileId, name])
}


model ShippingAddress {
  id          String   @id @default(cuid())
  firstName   String?
  lastName    String?
  company     String?
  address1    String?
  address2    String?
  city        String?
  state       String?
  postalCode  String?
  country     String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders      Order[]

  @@index([postalCode])
}



// Enums
enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
  REFUNDED
}

enum Role {
  VENDOR
  ADMIN
  CUSTOMER
}

enum TaxAlertType {
  OVERDUE
  REMINDER
  PAYMENT_CONFIRMED
}

enum WalletTransactionType {
  DEBIT
  CREDIT
}
